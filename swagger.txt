openapi: 3.0.3
info:
  title: My API
  version: '1.0'
  description: Best API ever
  termsOfService: https://www.example.com
  contact:
    email: ashish@mysite.com
    name: Ashish
    url: ashish.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://my-json-server.typicode.com/typicode/demo
    variables: {}
    description: My demo server for posts
  - url: https://my-json-server.typicode.com/bearc0025/api
    variables: {}
    description: Bear's api server for users
  - url: http://localhost:3000
    variables: {}
    description: local server
  - url: http://localhost:{port}
    variables:
      port:
        default: '3000'
        enum:
          - '3000'
          - '3001'
        description: ''
paths:
  /users:
    summary: user level operations
    description: create and reads users
    get:
      summary: get all users
      description: users API
      operationId: fetchUsers
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            example: 20
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            example: 20
      responses:
        2XX:
          $ref: '#/components/responses/UserArrayResponseBody'
        default:
          description: Default error sample response
    post:
      summary: create user
      description: store user on server
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserPostBody'
      responses:
        2XX:
          description: Successfull fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
  /users/{userId}:
    summary: individual user operations
    description: fetch, delete, update
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: fetch a user
      description: GET a user by id
      operationId: getUser
      responses:
        default:
          description: default error sample response
    delete:
      summary: delete a user
      description: remove user from server
      operationId: deleteUser
      responses:
        default:
          description: Default error sample response
      tags:
        - users
    patch:
      summary: update a user
      description: store changes on server
      operationId: updateUser
      requestBody:
        $ref: '#/components/requestBodies/UserPostBody'
      responses:
        default:
          description: Default error sample response
      tags:
        - users
  /posts:
    summary: all post operations
    description: CRUD on posts
    get:
      summary: get all posts
      description: post information
      operationId: fetchPosts
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            example: 20
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            example: 20
      responses:
        default:
          description: Default error sample response
  /posts/{postId}:
    summary: individual post operations
    description: fetch, delete, update
    parameters:
      - $ref: '#/components/parameters/PostId'
    get:
      summary: fetch a post
      description: GET a post by id
      operationId: getPost
      responses:
        default:
          description: default error sample response
components:
  parameters:
    PostId:
      in: path
      required: true
      name: postId
      schema:
        type: integer
        minimum: 0
        example: 5
    UserId:
      in: path
      required: true
      name: userId
      schema:
        type: string
        example: abc123
  responses:
    UserArrayResponseBody:
      description: returns list of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserArray'
    UserRespBody:
      description: new user response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FullUser'
  requestBodies:
    UserPostBody:
      description: new user request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostNewUser'
  schemas:
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/FullUser'
    FullUser:
      allOf:
        - $ref: '#/components/schemas/PostNewUser'
        - type: object
          properties:
            id:
              type: string
              example: some name
    PostNewUser:
      type: object
      properties:
        username:
          type: string
          example: bear
        score:
          type: integer
          example: 55
        active:
          type: boolean
          example: true
